@using MyBlazorShop.Libraries.Services.Product.Models;
@using MyBlazorShop.Libraries.Services.ShoppingCart;
@using MyBlazorShop.Web.BlazorWasm.Pages;
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Reflection;
@inject HttpClient httpClient
@inject IShoppingCartService shoppingCartService
@inject IJSRuntime jsRuntime
@implements IProductAddToCart
@if (Product != null)
{
    <li class="display:flex flex-direction:column flex-grow:0 flex-shrink:0 margin-bottom:32 padding-horizontal:16 width:100 @@mq-560--width:50 @@mq-800--width:33 @@mq-960--width:25">
        <div class="display:flex flex-direction:column flex-grow:1">
            <a @onclick=" OnShowModalClick" class="group color:neutral-3a3a3d flex-grow:1 margin-bottom:16">
                <span class="display:block margin-bottom:16 padding-bottom:100pc position:relative">
                    <img alt="Photo of @Product.Name" src="@ImageSource" style="position:absolute; margin-bottom:10% max-width:100%; max-height:150px;">
                </span>
                <h3 class="font-weight:500 font-size:20 group:hocus__color:orange-ff583d letter-spacing:1_2 margin-bottom:16">@Product.Name</h3>
                <p class="line-height:1.166 font-size:24">$@Product.Price.ToString("0.00")</p>
            </a>
            <button class="button solid gold" @onclick="ChangeImage">Change image</button>
          
            <input type="text" placeholder="Quantity" name="Qty" @bind="Quantity" @bind:event="oninput" class="padding:12 &:hocus--border-color:neutral-000000 appearance:none background-color:neutral-ffffff border-color:neutral-4c5b5c border-radius:0 border-style:solid border-width:1 color:neutral-483e40 min-height:form-input width:100" />
            <button @onclick="AddToCart" class="display:inline-block padding-horizontal:24 padding-horizontal:24 &amp;:hocus--background-color:yellow-f0c808 background-color:orange-ff583d color:neutral-222224 font-size:18 font-weight:700 line-height:1 margin-bottom:32 padding-vertical:12 padding-vertical:16">
                @if (shoppingCartService.HasProduct(Product.ID))
                {
                    <span>Added to cart. 
                        @if (Quantity.HasValue) {
                            <text>Add @Quantity more?</text>
                        }
                    </span>
                }
                else {
                    <span>
                        Add @Quantity to Cart?
                    </span>
                }
            </button>
            <ConfirmDialog @ref="dialog" />

            <Modal @ref="modal" title="Details" UseStaticBackdrop="true" Size="ModalSize.Small">
                <BodyTemplate>
                    <table style="width:100%">
                        <tr>
                            <td>Name:</td>
                            <td>@Product.Name</td>
                        </tr>
                        <tr>
                            <td>Length:</td>
                            <td>@Product.Length feet</td>
                        </tr>
                        <tr>
                            <td>Width:</td>
                            <td>@Product.Width inches</td>
                        </tr>
                        <tr>
                            <td>Thickness:</td>
                            <td>@Product.Thickness inches</td>
                        </tr>
                        <tr>
                            <td>Volume:</td>
                            <td>@Product.Volume L</td>
                        </tr>
                        <tr>
                            <td>Type:</td>
                            <td>@Product.Type</td>
                        </tr>
                        <tr>
                            <td>Price:</td>
                            <td>$@Product.Price</td>
                        </tr>
                        <tr>
                            <td>Equipment:</td>
                            <td>@Product.Equipment</td>
                        </tr>
                    </table>
                </BodyTemplate>
                <FooterTemplate>
                    <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                    <Button Color="ButtonColor.Primary" @onclick="OnHideModalClick">Understood</Button>
                </FooterTemplate>
            </Modal>
        </div>
    </li>
}
@code {
    private ConfirmDialog dialog = default!;
    private Modal modal = default!;
    private bool HasProductInCart { get; set; }
    [Parameter]
    public ProductModel? Product { get; set; }

    public int? Quantity { get; set; }  

    private IJSObjectReference? StreamImageModule { get; set; }

    private ElementReference ProductImageRef;

    [Parameter]
    public string? Slug { get; set; }

    private string? temp { get; set; }

    private string? ImageSource = "";
}
@functions {
    protected override async Task OnParametersSetAsync()
    {
        if (StreamImageModule == null)
        {
            StreamImageModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "/js/StreamImage.js");
        }

        if (Product != null)
        {
            ImageSource = "/images/" + Product.Image;

            HasProductInCart = shoppingCartService.HasProduct(Product.ID);

            var imageStream = await StreamImageAsync();

            if (imageStream != null)
            {
                var dotNetImageStream = new DotNetStreamReference(imageStream);
                await StreamImageModule.InvokeVoidAsync("LoadImageThroughStream", ProductImageRef, dotNetImageStream);
            }
        }

        await base.OnParametersSetAsync();
    }

    private void ChangeImage()
    {
        if (ImageSource == "images/monkey_glider.jpg")
        {
            ImageSource = temp;
        }
        else if (ImageSource != "images/monkey_glider.jpg")
        {
            temp = ImageSource;
            ImageSource = "images/monkey_glider.jpg";
        }
    }

    private async Task<Stream?> StreamImageAsync()
    {
        if (Product == null)
        {
            return null;
        }

        return await httpClient.GetStreamAsync("/images/" + Product.Image);
    }

    public async Task AddToCart()
    {
        bool confirmation = false;

        var options = new ConfirmDialogOptions
            {
                YesButtonText = "OK",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "CANCEL",
                NoButtonColor = ButtonColor.Danger
            };
        
        @if (Quantity.HasValue)
        {
           confirmation = await dialog.ShowAsync(
           title: "Confirm",
           message1: $"Are you sure, that you want to add {Quantity} {Product.Name} to the cart?",
           confirmDialogOptions: options);
        }
        else
        {
           confirmation = await dialog.ShowAsync(
           title: "Confirm",
           message1: $"Are you sure, that you want to add 1 {Product.Name} to the cart?",
           confirmDialogOptions: options);
        }

    if (confirmation)
        {
            if (Product != null)
            {
                shoppingCartService.AddProduct(Product, Quantity ?? 1);
                Quantity = null;
            }
        }

    }
        private async Task OnShowModalClick()
        {
            await modal.ShowAsync();
        }

        private async Task OnHideModalClick()
        {
            await modal.HideAsync();
        }
}
