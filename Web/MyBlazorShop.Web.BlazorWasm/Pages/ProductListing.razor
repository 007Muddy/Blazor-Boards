

@using MyBlazorShop.Libraries.Services.Product
@using MyBlazorShop.Libraries.Services.Product.Models
@using MyBlazorShop.Libraries.Services.Storage;
@page "/"
@inject IProductService productService
@inject IStorageService storageService
<PageTitle>Product listings</PageTitle>
<HeadContent>
    <meta name="description" content="Product listing page" />
</HeadContent>
<Hero Title="Shop" Description="Ride the waves in style and confidence with our high-performance surfboard. Lightweight, stable, and sleek, it's the ultimate tool for wave conquerors. Elevate your surf game today! 🏄‍♂️🤙" Image="product-montage.jpg" BackgroundImage="shop-hero-yellow"> </Hero>

@if (Products?.Any() ?? false)
{
    <main class="margin-horizontal:auto max-width:container padding-horizontal:32">
        <div id="vue-shop" class="margin-bottom:32 quenched">
            <div class="display:flex flex-grow:1 flex-wrap:wrap margin-bottom:-32 margin-horizontal:-16">
                <div class="display:flex flex-direction:column flex-grow:0 flex-shrink:0 margin-bottom:32 padding-horizontal:16 width:100 @@mq-768--width:100">
                    <ul class="display:flex flex-grow:1 flex-wrap:wrap margin-bottom:-32 margin-horizontal:-16">
                        @foreach (var product in DisplayedProducts)
                        {
                            <ProductListingItem Product="product"></ProductListingItem>
                        }
                    </ul>
                </div>
                <div>
                <Pagination ActivePageNumber="@currentPageNumber"
                            TotalPages="totalPages"
                            DisplayPages="5"    
                            PageChanged="OnPageChangedAsync"
                            FirstLinkIcon="IconName.ChevronDoubleLeft"
                            PreviousLinkIcon="IconName.ChevronLeft"
                            NextLinkIcon="IconName.ChevronRight"
                            LastLinkIcon="IconName.ChevronDoubleRight" />
                </div>
            </div>
        </div>
    </main>

}

@code {
    public IList<ProductModel> Products { get; set; }
    private List<ProductModel> DisplayedProducts { get; set; }
    private int currentPageNumber = 1;
    private int itemsPerPage = 4;
    private int totalPages;
}
@functions {
    protected override async Task OnInitializedAsync()
    {

        //check if data is retrived from API
        var isDataRetrived = productService.GetAll();

        //If data is not retrived, seed the data and populate the list
        if (isDataRetrived.Count == 0)
        {
            await productService.GetSeedDataFromAPI();

            Products = productService.GetAll();
        }
        //If data is retrived then populate the list
        else
        {
            Products = productService.GetAll();
        }
        UpdateDisplayedProducts();
        // HttpClient httpClient = new HttpClient();
        // await storageService.GetBoardsFromApi(httpClient);
        // Products = storageService.Products;
        // await base.OnInitializedAsync();
    }

    private void UpdateDisplayedProducts()
    {
        totalPages = (int)Math.Ceiling((double)Products.Count / itemsPerPage);
        DisplayedProducts = Products.Skip((currentPageNumber - 1) * itemsPerPage).Take(itemsPerPage).ToList();
    }

    private async Task OnPageChangedAsync(int newPage)
    {
        currentPageNumber = newPage;
        UpdateDisplayedProducts();
    }
}